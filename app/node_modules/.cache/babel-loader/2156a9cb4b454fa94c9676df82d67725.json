{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\batyayur\\\\OneDrive - AMDOCS\\\\Protected Folders\\\\Documents\\\\BattyDocument\\\\work\\\\MoonActiveProject\\\\ui\\\\src\\\\components\\\\promotionTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useReducer, useEffect } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { VirtualTableState } from \"@devexpress/dx-react-grid\";\nimport { Grid, VirtualTable, TableHeaderRow } from \"@devexpress/dx-react-grid-material-ui\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VIRTUAL_PAGE_SIZE = 100;\nconst MAX_ROWS = 50000;\nconst URL = \"https://js.devexpress.com/Demos/WidgetsGalleryDataService/api/Sales\";\n\nconst getRowId = row => row.Id;\n\nconst buildQueryString = (skip, take) => `${URL}?skip=${skip}&take=${take}`;\n\nconst initialState = {\n  rows: [],\n  skip: 0,\n  requestedSkip: 0,\n  take: VIRTUAL_PAGE_SIZE * 2,\n  totalCount: 0,\n  loading: false,\n  lastQuery: \"\"\n};\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case \"UPDATE_ROWS\":\n      return { ...state,\n        ...payload,\n        loading: false\n      };\n\n    case \"START_LOADING\":\n      return { ...state,\n        requestedSkip: payload.requestedSkip,\n        take: payload.take\n      };\n\n    case \"REQUEST_ERROR\":\n      return { ...state,\n        loading: false\n      };\n\n    case \"FETCH_INIT\":\n      return { ...state,\n        loading: true\n      };\n\n    case \"UPDATE_QUERY\":\n      return { ...state,\n        lastQuery: payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default function PromotionTable() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  promotionName: string;\n\n  promotionType: String;\n\n  promotionStartDate: Date;\n\n  promotionEndDate: Date;\n\n  userGroupName: string;\n\n  const columns = [{\n    name: \"promotionName\",\n    title: \"Name\",\n    getCellValue: row => row.promotionName\n  }, {\n    name: \"promotionType\",\n    title: \"Type\",\n    getCellValue: row => row.type\n  }, {\n    name: \"promotionStartDate\",\n    title: \"Start Date\",\n    getCellValue: row => row.startDate\n  }, {\n    name: \"promotionEndDate\",\n    title: \"End Date\",\n    getCellValue: row => row.endDate\n  }, {\n    name: \"userGroupName\",\n    title: \"User Group Name\",\n    getCellValue: row => row.userGroupName\n  }, {\n    name: \"Action\",\n    title: \"Action\"\n  }];\n  const [tableColumnExtensions] = useState([{\n    columnName: \"promotionName\",\n    width: 80\n  }, {\n    columnName: \"promotionType\",\n    width: 220\n  }, {\n    columnName: \"promotionStartDate\",\n    width: 220\n  }, {\n    columnName: \"promotionEndDate\",\n    width: 120\n  }]);\n\n  const getRemoteRows = (requestedSkip, take) => {\n    dispatch({\n      type: \"START_LOADING\",\n      payload: {\n        requestedSkip,\n        take\n      }\n    });\n  };\n\n  const loadData = () => {\n    const {\n      requestedSkip,\n      take,\n      lastQuery,\n      loading\n    } = state;\n    const query = buildQueryString(requestedSkip, take);\n\n    if (query !== lastQuery && !loading) {\n      dispatch({\n        type: \"FETCH_INIT\"\n      });\n      fetch(query).then(response => response.json()).then(({\n        data\n      }) => {\n        dispatch({\n          type: \"UPDATE_ROWS\",\n          payload: {\n            skip: requestedSkip,\n            rows: data,\n            totalCount: MAX_ROWS\n          }\n        });\n      }).catch(() => dispatch({\n        type: \"REQUEST_ERROR\"\n      }));\n      dispatch({\n        type: \"UPDATE_QUERY\",\n        payload: query\n      });\n    }\n  };\n\n  useEffect(() => loadData());\n  const {\n    rows,\n    skip,\n    totalCount,\n    loading\n  } = state;\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      rows: rows,\n      columns: columns,\n      getRowId: getRowId,\n      children: [/*#__PURE__*/_jsxDEV(VirtualTableState, {\n        infiniteScrolling: true,\n        loading: loading,\n        totalRowCount: totalCount,\n        pageSize: VIRTUAL_PAGE_SIZE,\n        skip: skip,\n        getRows: getRemoteRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(VirtualTable, {\n        columnExtensions: tableColumnExtensions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableHeaderRow, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PromotionTable, \"TprzY9ONb/m58mGqH5XxyiO10pk=\");\n\n_c = PromotionTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PromotionTable\");","map":{"version":3,"sources":["C:/Users/batyayur/OneDrive - AMDOCS/Protected Folders/Documents/BattyDocument/work/MoonActiveProject/ui/src/components/promotionTable.tsx"],"names":["React","useState","useReducer","useEffect","Paper","VirtualTableState","Grid","VirtualTable","TableHeaderRow","VIRTUAL_PAGE_SIZE","MAX_ROWS","URL","getRowId","row","Id","buildQueryString","skip","take","initialState","rows","requestedSkip","totalCount","loading","lastQuery","reducer","state","type","payload","PromotionTable","dispatch","promotionName","string","promotionType","String","promotionStartDate","Date","promotionEndDate","userGroupName","columns","name","title","getCellValue","startDate","endDate","tableColumnExtensions","columnName","width","getRemoteRows","loadData","query","fetch","then","response","json","data","catch"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { VirtualTableState } from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  VirtualTable,\r\n  TableHeaderRow,\r\n} from \"@devexpress/dx-react-grid-material-ui\";\r\n\r\nconst VIRTUAL_PAGE_SIZE = 100;\r\nconst MAX_ROWS = 50000;\r\nconst URL =\r\n  \"https://js.devexpress.com/Demos/WidgetsGalleryDataService/api/Sales\";\r\nconst getRowId = (row: { Id: any }) => row.Id;\r\nconst buildQueryString = (skip: any, take: any) =>\r\n  `${URL}?skip=${skip}&take=${take}`;\r\n\r\nconst initialState = {\r\n  rows: [],\r\n  skip: 0,\r\n  requestedSkip: 0,\r\n  take: VIRTUAL_PAGE_SIZE * 2,\r\n  totalCount: 0,\r\n  loading: false,\r\n  lastQuery: \"\",\r\n};\r\n\r\nfunction reducer(state: any, { type, payload }: any) {\r\n  switch (type) {\r\n    case \"UPDATE_ROWS\":\r\n      return {\r\n        ...state,\r\n        ...payload,\r\n        loading: false,\r\n      };\r\n    case \"START_LOADING\":\r\n      return {\r\n        ...state,\r\n        requestedSkip: payload.requestedSkip,\r\n        take: payload.take,\r\n      };\r\n    case \"REQUEST_ERROR\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    case \"FETCH_INIT\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case \"UPDATE_QUERY\":\r\n      return {\r\n        ...state,\r\n        lastQuery: payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function PromotionTable() {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  promotionName: string;\r\n  promotionType: String;\r\n  promotionStartDate: Date;\r\n  promotionEndDate: Date;\r\n  userGroupName: string;\r\n  const columns = [\r\n    {\r\n      name: \"promotionName\",\r\n      title: \"Name\",\r\n      getCellValue: (row: any ) =>row.promotionName,\r\n    },\r\n    {\r\n      name: \"promotionType\",\r\n      title: \"Type\",\r\n      getCellValue: (row: any) => row.type,\r\n    },\r\n    {\r\n      name: \"promotionStartDate\",\r\n      title: \"Start Date\",\r\n      getCellValue: (row: any) => row.startDate,\r\n    },\r\n    {\r\n      name: \"promotionEndDate\",\r\n      title: \"End Date\",\r\n      getCellValue: (row: any) => row.endDate,\r\n    },\r\n    {\r\n      name: \"userGroupName\",\r\n      title: \"User Group Name\",\r\n      getCellValue: (row: any) => row.userGroupName,\r\n    },\r\n    { name: \"Action\", title: \"Action\" },\r\n  ];\r\n  const [tableColumnExtensions] = useState([\r\n    { columnName: \"promotionName\", width: 80 },\r\n    { columnName: \"promotionType\", width: 220 },\r\n    { columnName: \"promotionStartDate\", width: 220 },\r\n    { columnName: \"promotionEndDate\", width: 120 },\r\n  ]);\r\n\r\n  const getRemoteRows = (requestedSkip: any, take: any) => {\r\n    dispatch({ type: \"START_LOADING\", payload: { requestedSkip, take } });\r\n  };\r\n\r\n  const loadData = () => {\r\n    const { requestedSkip, take, lastQuery, loading } = state;\r\n    const query = buildQueryString(requestedSkip, take);\r\n    if (query !== lastQuery && !loading) {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n      fetch(query)\r\n        .then((response) => response.json())\r\n        .then(({ data }) => {\r\n          dispatch({\r\n            type: \"UPDATE_ROWS\",\r\n            payload: {\r\n              skip: requestedSkip,\r\n              rows: data,\r\n              totalCount: MAX_ROWS,\r\n            },\r\n          });\r\n        })\r\n        .catch(() => dispatch({ type: \"REQUEST_ERROR\" }));\r\n      dispatch({ type: \"UPDATE_QUERY\", payload: query });\r\n    }\r\n  };\r\n\r\n  useEffect(() => loadData());\r\n\r\n  const { rows, skip, totalCount, loading } = state;\r\n  return (\r\n    <Paper>\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <VirtualTableState\r\n          infiniteScrolling\r\n          loading={loading}\r\n          totalRowCount={totalCount}\r\n          pageSize={VIRTUAL_PAGE_SIZE}\r\n          skip={skip}\r\n          getRows={getRemoteRows}\r\n        />\r\n        <VirtualTable columnExtensions={tableColumnExtensions} />\r\n        <TableHeaderRow />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}