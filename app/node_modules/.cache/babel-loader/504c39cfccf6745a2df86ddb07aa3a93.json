{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05DC\\u05E0\\u05D5\\u05D1\\u05D5\\\\source\\\\repos\\\\CalculatorApp\\\\app\\\\src\\\\common\\\\react-number-format.tsx\";\nimport NumberFormat from 'react-number-format';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function NumberFormatCustom(props) {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(NumberFormat, { ...other,\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    thousandSeparator: true,\n    isNumericString: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_c = NumberFormatCustom;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumberFormatCustom\");","map":{"version":3,"sources":["C:/Users/לנובו/source/repos/CalculatorApp/app/src/common/react-number-format.tsx"],"names":["NumberFormat","NumberFormatCustom","props","inputRef","onChange","other","values","target","name","value"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,qBAAzB;;AASA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAA4D;AACjE,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsB,OAAGC;AAAzB,MAAmCH,KAAzC;AAEA,sBACE,QAAC,YAAD,OACMG,KADN;AAEE,IAAA,WAAW,EAAEF,QAFf;AAGE,IAAA,aAAa,EAAGG,MAAD,IAAiB;AAC9BF,MAAAA,QAAQ,CAAC;AACPG,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAEN,KAAK,CAACM,IADN;AAENC,UAAAA,KAAK,EAAEH,MAAM,CAACG;AAFR;AADD,OAAD,CAAR;AAMD,KAVH;AAWE,IAAA,iBAAiB,MAXnB;AAYE,IAAA,eAAe;AAZjB;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;KAnBeR,kB","sourcesContent":["import NumberFormat from 'react-number-format';\r\n\r\n\r\ninterface NumberFormatCustomProps {\r\n  inputRef: (instance: NumberFormat | null) => void;\r\n  onChange: (event: { target: { name: string; value: string } }) => void;\r\n  name: string;\r\n}\r\n\r\nexport function NumberFormatCustom(props: NumberFormatCustomProps) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values: any) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n    />\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}